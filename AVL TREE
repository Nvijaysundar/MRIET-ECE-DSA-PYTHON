class Node:
  def __init__(self,data):
    self.data = data
    self.left = None
    self.right  = None
    self.height = 1
    
class AVLTree:
  def getHeight(self,root):
    return root.height if root else 0
  def getBalance(self,root):
    return self.getHeight(root.left) - self.getHeight(root.right) if root else 0
  
  
  
  def leftRotation(self,root):
    z = root.right
    t2 = z.left
    
    z.left = root
    root.right = t2
    
    root.height = 1+ max(self.getHeight(root.left),self.getHeight(root.right))
    z.height = 1+ max(self.getHeight(z.left),self.getHeight(z.right))
    
    return z
    
  def rightRotation(self,root):
    z = root.left
    t2 = z.right
    
    z.right = root
    root.left = t2
    
    
    root.height = 1+ max(self.getHeight(root.left),self.getHeight(root.right))
    z.height = 1+ max(self.getHeight(z.left),self.getHeight(z.right))
    
    return z
  def find_min(self,root):
    while root.left is not None:
      root = root.left
    return root
  
  def delete(self,root,data):
    if root is None:
      return root
    elif data<root.data:
      root.left = self.delete(root.left,data)
    elif data > root.data:
      root.right = self.delete(root.right,data)
    else:
      if root.left is None:
        return root.right
      elif root.right is None:
        return root.left
      else:
        temp = self.find_min(root.right)
        root.data = temp.data
        root.right = self.delete(root.right,temp.data)
    
    if root is None:
      return root
    root.height = 1 + max(self.getHeight(root.left), self.getHeight(root.right))
    
    bal = self.getBalance(root)
    
    if bal > 1 and key < root.left.data:
      return self.rightRotation(root)
    if bal < -1 and key > root.right.data:
      return self.leftRotation(root)
    if bal > 1 and key > root.left.data:
      root.left = self.leftRotation(root.left)
      return self.rightRotation(root)
    if bal < - 1 and key < root.right.data:
      root.right = self.rightRotation(root.right)
      return self.leftRotation(root)
    
    return root
    
  
  def insert(self,root,key):
    if not root:
      return Node(key)
    elif key < root.data:
      root.left = self.insert(root.left,key)
    else: 
      root.right = self.insert(root.right,key)
      
    root.height = 1 + max(self.getHeight(root.left), self.getHeight(root.right))
    
    bal = self.getBalance(root)
    
    if bal > 1 and key < root.left.data:
      return self.rightRotation(root)
    if bal < -1 and key > root.right.data:
      return self.leftRotation(root)
    if bal > 1 and key > root.left.data:
      root.left = self.leftRotation(root.left)
      return self.rightRotation(root)
    if bal < - 1 and key < root.right.data:
      root.right = self.rightRotation(root.right)
      return self.leftRotation(root)
    
    return root
    
    
  def Inorder(self,root):
    if root:
      self.Inorder(root.left)
      print(root.data, end = " ")
      self.Inorder(root.right)
      
  

avl = AVLTree()
root = None
li = [45,1,67,132,14,35,46,145,122,74,33]
for temp in li:
  root = avl.insert(root,temp)

avl.Inorder(root)
avl.delete(root,35)
print()
avl.Inorder(root)
